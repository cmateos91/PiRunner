// Sistema de internacionalizaci√≥n para Pi Runner
class I18nManager {
    constructor() {
        this.currentLanguage = 'en'; // Idioma por defecto
        this.translations = {};
        this.supportedLanguages = ['en', 'es', 'hi']; // Ingl√©s, Espa√±ol, Hindi
        
        this.init();
    }
    
    async init() {
        try {
            // Detectar idioma del usuario
            this.currentLanguage = this.detectUserLanguage();
            
            // Cargar traducciones
            await this.loadTranslations();
            
            // Aplicar traducciones a la p√°gina
            this.applyTranslations();
            
            console.log(`üåç I18n initialized: ${this.currentLanguage}`);
        } catch (error) {
            console.error('‚ùå Error initializing i18n:', error);
            // Fallback al ingl√©s
            this.currentLanguage = 'en';
            await this.loadTranslations();
            this.applyTranslations();
        }
    }
    
    detectUserLanguage() {
        // 1. Verificar localStorage (preferencia del usuario)
        const savedLang = localStorage.getItem('pirunner_language');
        if (savedLang && this.supportedLanguages.includes(savedLang)) {
            return savedLang;
        }
        
        // 2. Detectar desde navegador
        const browserLang = navigator.language || navigator.userLanguage;
        const langCode = browserLang.toLowerCase().split('-')[0];
        
        // 3. Mapear c√≥digos especiales
        const langMap = {
            'hi': 'hi',     // Hindi
            'en': 'en',     // English
            'es': 'es',     // Spanish
            'in': 'hi',     // Indonesia -> Hindi (Pi Network tiene muchos usuarios de India)
        };
        
        const detectedLang = langMap[langCode] || 'en';
        
        console.log(`üåç Detected language: ${browserLang} -> ${detectedLang}`);
        return this.supportedLanguages.includes(detectedLang) ? detectedLang : 'en';
    }
    
    async loadTranslations() {
        try {
            // Cargar archivo de traducciones del idioma actual
            const response = await fetch(`/translations/${this.currentLanguage}.json`);
            
            if (!response.ok) {
                throw new Error(`Failed to load ${this.currentLanguage}.json`);
            }
            
            this.translations = await response.json();
            console.log(`üìù Translations loaded for: ${this.currentLanguage}`);
            
        } catch (error) {
            console.warn(`‚ö†Ô∏è Failed to load translations for ${this.currentLanguage}, using fallback`);
            
            // Fallback: usar traducciones embebidas
            this.translations = this.getFallbackTranslations(this.currentLanguage);
        }
    }
    
    getFallbackTranslations(lang) {
        const fallbackTranslations = {
            en: {
                // Game UI
                "game.points": "Points",
                "game.coins": "Pi Coins",
                "game.gameOver": "Game Over!",
                "game.score": "Score",
                "game.restart": "Restart",
                "game.leaderboard": "üìä Leaderboard",
                "game.saveScore": "üíæ Save Score",
                
                // Leaderboard
                "leaderboard.title": "üèÜ Leaderboard",
                "leaderboard.all": "All Time",
                "leaderboard.today": "Today",
                "leaderboard.week": "Week",
                "leaderboard.month": "Month",
                "leaderboard.empty": "üì≠ No scores yet",
                "leaderboard.beFirst": "Be the first to save your score!",
                "leaderboard.loading": "Loading...",
                "leaderboard.error": "‚ùå Error loading leaderboard",
                "leaderboard.tryAgain": "Try again later",
                
                // Payments
                "payment.processing": "Processing payment...",
                "payment.finalizing": "Finalizing payment...",
                "payment.cancelled": "Payment cancelled. Score not saved.",
                "payment.error": "Error processing payment. Try again.",
                "payment.success": "üéâ New record saved successfully!",
                "payment.noImprovement": "üí™ Score not improved. Try to beat your record!",
                "payment.authenticate": "üîê Authenticating with Pi Network...",
                "payment.authError": "‚ùå Authentication error",
                "payment.initiating": "üí∞ Initiating payment to save score...",
                
                // Audio
                "audio.mute": "Mute",
                "audio.unmute": "Unmute",
                
                // Ads
                "ads.space": "üì± Ad space reserved ‚Ä¢ Pi Network Ads Ready",
                
                // General
                "general.loading": "Loading...",
                "general.error": "Error",
                "general.success": "Success",
                "general.cancel": "Cancel",
                "general.close": "Close",
                "general.ok": "OK"
            },
            
            es: {
                // Game UI
                "game.points": "Puntos",
                "game.coins": "Pi Coins",
                "game.gameOver": "¬°Juego Terminado!",
                "game.score": "Puntuaci√≥n",
                "game.restart": "Reiniciar",
                "game.leaderboard": "üìä Clasificaci√≥n",
                "game.saveScore": "üíæ Guardar",
                
                // Leaderboard
                "leaderboard.title": "üèÜ Clasificaci√≥n",
                "leaderboard.all": "Todo",
                "leaderboard.today": "Hoy",
                "leaderboard.week": "Semana",
                "leaderboard.month": "Mes",
                "leaderboard.empty": "üì≠ No hay puntuaciones a√∫n",
                "leaderboard.beFirst": "¬°S√© el primero en guardar tu score!",
                "leaderboard.loading": "Cargando...",
                "leaderboard.error": "‚ùå Error cargando clasificaci√≥n",
                "leaderboard.tryAgain": "Int√©ntalo de nuevo m√°s tarde",
                
                // Payments
                "payment.processing": "Procesando pago...",
                "payment.finalizing": "Finalizando pago...",
                "payment.cancelled": "Pago cancelado. Puntuaci√≥n no guardada.",
                "payment.error": "Error al procesar el pago. Int√©ntalo de nuevo.",
                "payment.success": "¬°Nuevo r√©cord guardado exitosamente! üéâ",
                "payment.noImprovement": "Puntuaci√≥n no mejorada. ¬°Intenta superar tu r√©cord! üí™",
                "payment.authenticate": "üîê Autenticando con Pi Network...",
                "payment.authError": "‚ùå Error de autenticaci√≥n",
                "payment.initiating": "üí∞ Iniciando pago para guardar puntuaci√≥n...",
                
                // Audio
                "audio.mute": "Silenciar",
                "audio.unmute": "Activar sonido",
                
                // Ads
                "ads.space": "üì± Espacio reservado para anuncios ‚Ä¢ Pi Network Ads Ready",
                
                // General
                "general.loading": "Cargando...",
                "general.error": "Error",
                "general.success": "√âxito",
                "general.cancel": "Cancelar",
                "general.close": "Cerrar",
                "general.ok": "OK"
            },
            
            hi: {
                // Game UI
                "game.points": "‡§Ö‡§Ç‡§ï",
                "game.coins": "Pi ‡§ï‡•â‡§á‡§®‡•ç‡§∏",
                "game.gameOver": "‡§ñ‡•á‡§≤ ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§!",
                "game.score": "‡§∏‡•ç‡§ï‡•ã‡§∞",
                "game.restart": "‡§´‡§ø‡§∞ ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç",
                "game.leaderboard": "üìä ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§°",
                "game.saveScore": "üíæ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç",
                
                // Leaderboard
                "leaderboard.title": "üèÜ ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§°",
                "leaderboard.all": "‡§∏‡§≠‡•Ä ‡§∏‡§Æ‡§Ø",
                "leaderboard.today": "‡§Ü‡§ú",
                "leaderboard.week": "‡§∏‡§™‡•ç‡§§‡§æ‡§π",
                "leaderboard.month": "‡§Æ‡§π‡•Ä‡§®‡§æ",
                "leaderboard.empty": "üì≠ ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§®‡§π‡•Ä‡§Ç",
                "leaderboard.beFirst": "‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡•á ‡§™‡§π‡§≤‡•á ‡§¨‡§®‡•á‡§Ç!",
                "leaderboard.loading": "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
                "leaderboard.error": "‚ùå ‡§≤‡•Ä‡§°‡§∞‡§¨‡•ã‡§∞‡•ç‡§° ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
                "leaderboard.tryAgain": "‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§´‡§ø‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç",
                
                // Payments
                "payment.processing": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
                "payment.finalizing": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§ï‡•ã ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§∞‡•Ç‡§™ ‡§¶‡•á ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
                "payment.cancelled": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∞‡§¶‡•ç‡§¶‡•§ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡•á‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü‡•§",
                "payment.error": "‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§ ‡§´‡§ø‡§∞ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§",
                "payment.success": "üéâ ‡§®‡§Ø‡§æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡•á‡§µ ‡§π‡•Å‡§Ü!",
                "payment.noImprovement": "üí™ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§Ö‡§™‡§®‡§æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§§‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç!",
                "payment.authenticate": "üîê Pi Network ‡§ï‡•á ‡§∏‡§æ‡§• ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£...",
                "payment.authError": "‚ùå ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•Ä‡§ï‡§∞‡§£ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
                "payment.initiating": "üí∞ ‡§∏‡•ç‡§ï‡•ã‡§∞ ‡§∏‡•á‡§µ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§≠‡•Å‡§ó‡§§‡§æ‡§® ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...",
                
                // Audio
                "audio.mute": "‡§Æ‡•ç‡§Ø‡•Ç‡§ü ‡§ï‡§∞‡•á‡§Ç",
                "audio.unmute": "‡§Ü‡§µ‡§æ‡§ú‡§º ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡•á‡§Ç",
                
                // Ads
                "ads.space": "üì± ‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§™‡§® ‡§∏‡•ç‡§•‡§æ‡§® ‡§Ü‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‚Ä¢ Pi Network Ads ‡§§‡•à‡§Ø‡§æ‡§∞",
                
                // General
                "general.loading": "‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
                "general.error": "‡§§‡•ç‡§∞‡•Å‡§ü‡§ø",
                "general.success": "‡§∏‡§´‡§≤‡§§‡§æ",
                "general.cancel": "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
                "general.close": "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
                "general.ok": "‡§†‡•Ä‡§ï ‡§π‡•à"
            }
        };
        
        return fallbackTranslations[lang] || fallbackTranslations.en;
    }
    
    t(key, fallback = key) {
        // Obtener traducci√≥n por clave
        const translation = this.translations[key];
        return translation || fallback;
    }
    
    applyTranslations() {
        // Aplicar traducciones a elementos con data-i18n
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            const translation = this.t(key);
            
            if (element.tagName === 'INPUT' && element.type === 'submit') {
                element.value = translation;
            } else if (element.hasAttribute('placeholder')) {
                element.placeholder = translation;
            } else {
                element.textContent = translation;
            }
        });
        
        // Aplicar traducciones a elementos con data-i18n-title
        document.querySelectorAll('[data-i18n-title]').forEach(element => {
            const key = element.getAttribute('data-i18n-title');
            const translation = this.t(key);
            element.title = translation;
        });
        
        console.log(`üåç Translations applied for: ${this.currentLanguage}`);
    }
    
    async setLanguage(langCode) {
        if (!this.supportedLanguages.includes(langCode)) {
            console.warn(`‚ö†Ô∏è Language ${langCode} not supported`);
            return;
        }
        
        this.currentLanguage = langCode;
        localStorage.setItem('pirunner_language', langCode);
        
        await this.loadTranslations();
        this.applyTranslations();
        
        // Actualizar elementos din√°micos espec√≠ficos
        this.updateDynamicElements();
        
        // Trigger custom event para que otros componentes se actualicen
        window.dispatchEvent(new CustomEvent('languageChanged', {
            detail: { language: langCode }
        }));
        
        console.log(`üåç Language changed to: ${langCode}`);
    }
    
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    
    getSupportedLanguages() {
        return this.supportedLanguages;
    }
    
    // M√©todo para obtener traducciones para JavaScript
    getTranslation(key, fallback = key) {
        return this.t(key, fallback);
    }
    
    // M√©todo para formatear con variables
    format(key, variables = {}) {
        let translation = this.t(key);
        
        Object.keys(variables).forEach(variable => {
            translation = translation.replace(`{${variable}}`, variables[variable]);
        });
        
        return translation;
    }
    
    // Actualizar elementos din√°micos que no usan data-i18n
    updateDynamicElements() {
        // Actualizar bot√≥n de audio
        if (window.updateAudioControls && window.game && window.game.audioManager) {
            const isMuted = window.game.audioManager.isMuted();
            window.updateAudioControls(isMuted);
        }
        
        // Si hay un leaderboard abierto, actualizar sus textos
        const leaderboardModal = document.getElementById('leaderboardModal');
        if (leaderboardModal && leaderboardModal.style.display !== 'none') {
            this.updateLeaderboardTexts();
        }
    }
    
    updateLeaderboardTexts() {
        // Actualizar t√≠tulo del leaderboard
        const title = document.querySelector('.leaderboard-title');
        if (title) title.textContent = this.t('leaderboard.title');
        
        // Actualizar pesta√±as
        const tabs = document.querySelectorAll('.leaderboard-tab');
        if (tabs.length >= 4) {
            tabs[0].textContent = this.t('leaderboard.all');
            tabs[1].textContent = this.t('leaderboard.today');
            tabs[2].textContent = this.t('leaderboard.week');
            tabs[3].textContent = this.t('leaderboard.month');
        }
        
        // Si hay contenido vac√≠o, actualizarlo
        const emptyContent = document.querySelector('.leaderboard-empty');
        if (emptyContent) {
            const paragraphs = emptyContent.querySelectorAll('p');
            if (paragraphs.length >= 2) {
                paragraphs[0].textContent = this.t('leaderboard.empty');
                paragraphs[1].textContent = this.t('leaderboard.beFirst');
            }
        }
    }
}

// Crear instancia global
window.i18n = new I18nManager();

console.log('üåç I18n Manager loaded');
